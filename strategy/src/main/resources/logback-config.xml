<?xml version="1.0" encoding="UTF-8"?>
<!-- scan:当此属性设置为true时，配置文档如果发生改变，将会被重新加载，默认值为true -->
<!-- scanPeriod:设置监测配置文档是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。
                 当scan为true时，此属性生效。默认的时间间隔为1分钟。 -->
<!-- debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="false" scanPeriod="60 seconds" debug="false">
    <contextName>logback_demo</contextName>

    <!--引用springBoot配置中心的配置-->
    <springProperty scope="context" name="log.path" source="global.logback.path" defaultValue="E:/logs"/>
    <!-- name的值是变量的名称，value的值时变量定义的值。通过定义的值会被插入到logger上下文中。定义后，可以使“${}”来使用变量。 -->
    <property name="log.pattern" value="%d{yyyy-MM-dd HH:mm:ss.SSS}|%level|%thread|%X{clientIp}|%X{traceId}|%X{rpcId}|%c.%M[%L]|%msg%n" />
    <property name="log.level" value="info" />
    <property name="log.name" value="logback_demo" />

    <!--Appender 为日志输出目的地-->
    <!--ConsoleAppender表示输出到控制台-->
    <appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
        <!--日志文档输出格式-->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            　　<pattern>${log.pattern}</pattern>
        </encoder>
    </appender>

    <!--RollingFileAppender表示文件大小到达指定尺寸的时候产生一个新的文件-->
    <appender name="file" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 日志记录器的滚动策略，按大小和日期记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 日志归档 -->
            <fileNamePattern>${log.path}/${log.name}.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!-- 日志尺寸的阈值 -->
            <maxFileSize>16KB</maxFileSize>
            <!--日志文档保留天数-->
            <maxHistory>90</maxHistory>
        </rollingPolicy>
        <!--日志文档输出格式-->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${log.pattern}</pattern>
        </encoder>
    </appender>

    <!--【特例设置】用来设置某一个包或者具体的某一个类的日志打印级别-->
    <logger name="org.springframework.boot.autoconfigure" level="info"/>

    <!-- 最终的策略 -->
    <!--
       root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性
       level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，
       不能设置为INHERITED或者同义词NULL。默认是DEBUG
       可以包含零个或多个元素，标识这个appender将会添加到这个logger。
   -->
    <!-- springProfile 表示springBoot的当前环境id-->
    <!--开发环境:输出到控制台和文件-->
    <springProfile name="dev">
        <root level="debug">
            <appender-ref ref="stdout" />
            <appender-ref ref="file" />
        </root>
    </springProfile>

    <!--测试环境:只输出到文件-->
    <springProfile name="test">
        <root level="${log.level}">
            <appender-ref ref="file" />
        </root>
    </springProfile>
</configuration>